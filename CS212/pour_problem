def pour_problem(X, Y, goal, start=(0, 0)):
    # X,Y are the capacity of glasses；（x,y）are the current fill levels and represent a state.
    # the goal is a level that can be in either glass.Start at start start state and follow
    # successors until we reach the goal. keep track of frontier and
    # previously explored;fail when no frontier.
    if goal in start:
        return [start]
    explored = set()  # set of a states we have visited
    frontier = [[start]]  # ordered list of paths we have blazed
    while frontier:
        path = frontier.pop(0)
        (x, y) = path[-1]  # last state in the first path of frontier
        for (state, action) in successors(x, y, X, Y).items():
            if state not in explored:
                explored.add(state)
                path2 = path + [action, state]
                if goal in state:
                    return path2
                else:
                    frontier.append(path2)
    return Fail


Fail = []


def successors(x, y, X, Y):
    """
    return  a dict of { state:action} pairs describing what can be reached from the
    (x,y) state ,and how
    :param x: glass level of x
    :param y: glass level of y
    :param X: glass sizes of X
    :param Y: glass sizes of Y
    :return:
    """
    assert x <= X and y <= Y
    return{((0, y + x) if y + x <= Y else(x - (Y - y), Y)): 'X->Y',
           ((y + x, 0) if y + x <= X else (X, y - (X - x))): 'Y->X',
           (X, y): 'fill X', (x, Y): 'fill Y',
           (0, y): 'empty X', (x, 0): 'empty Y'}

print(pour_problem(4,9,6))
